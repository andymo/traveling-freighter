{"version":3,"sources":["Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","label","isSelected","onCheckboxChange","className","type","name","checked","onChange","App","locations","Object","keys","distanceData","sort","state","checkboxes","reduce","options","option","start","selectAllCheckboxes","forEach","checkbox","setState","prevState","selectAll","deselectAll","handleCheckboxChange","changeEvent","target","handleFormSubmit","formSubmitEvent","preventDefault","filter","console","log","createCheckbox","key","createCheckboxes","map","updateStart","location","value","this","placeholder","onSubmit","onClick","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAiBeA,EAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,iBAAtB,OACf,yBAAKC,UAAU,cACb,+BACE,2BACEC,KAAK,WACLC,KAAML,EACNM,QAASL,EACTM,SAAUL,EACVC,UAAU,qBAEXH,K,+BCuGQQ,E,4MA5GbC,UAAYC,OAAOC,KAAKC,GAAcC,O,EAEtCC,MAAQ,CACNC,WAAY,EAAKN,UAAUO,QACzB,SAACC,EAASC,GAAV,mBAAC,eACID,GADL,kBAEGC,GAAS,MAEZ,IAEFC,MAAO,EAAKV,UAAU,I,EAGxBW,oBAAsB,SAAAnB,GACpBS,OAAOC,KAAK,EAAKG,MAAMC,YAAYM,SAAQ,SAAAC,GACzC,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BT,WAAW,2BACNS,EAAUT,YADL,kBAEPO,EAAWrB,Y,EAMpBwB,UAAY,kBAAM,EAAKL,qBAAoB,I,EAE3CM,YAAc,kBAAM,EAAKN,qBAAoB,I,EAE7CO,qBAAuB,SAAAC,GAAgB,IAC7BvB,EAASuB,EAAYC,OAArBxB,KAER,EAAKkB,UAAS,SAAAC,GAAS,MAAK,CAC1BT,WAAW,2BACNS,EAAUT,YADL,kBAEPV,GAAQmB,EAAUT,WAAWV,KAEhCc,MAAOK,EAAUL,W,EAIrBW,iBAAmB,SAAAC,GACjBA,EAAgBC,iBAEhBtB,OAAOC,KAAK,EAAKG,MAAMC,YACpBkB,QAAO,SAAAX,GAAQ,OAAI,EAAKR,MAAMC,WAAWO,MACzCD,SAAQ,SAAAC,GACPY,QAAQC,IAAIb,EAAU,mBAE1BY,QAAQC,IAAI,EAAKrB,MAAMK,MAAO,iB,EAGhCiB,eAAiB,SAAAlB,GAAM,OACrB,kBAAC,EAAD,CACElB,MAAOkB,EACPjB,WAAY,EAAKa,MAAMC,WAAWG,GAClChB,iBAAkB,EAAKyB,qBACvBU,IAAKnB,K,EAIToB,iBAAmB,kBAAM,EAAK7B,UAAU8B,IAAI,EAAKH,iB,EAEjDI,YAAc,SAAAC,GACZ,EAAKlB,UAAS,SAAAC,GAAS,MAAK,CAC1BT,WAAYS,EAAUT,WACtBI,MAAOsB,EAASC,W,uDAKlB,OACE,yBAAKvC,UAAU,aACb,mDACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aACb,6DACA,kBAAC,IAAD,CAAUc,QAAS0B,KAAKlC,UAAWiC,MAAOC,KAAKlC,UAAU,GAAIF,SAAUoC,KAAKH,YAAaI,YAAY,4BACrG,iFACA,0BAAMC,SAAUF,KAAKb,kBAClBa,KAAKL,mBAEN,yBAAKnC,UAAU,mBACb,4BACEC,KAAK,SACLD,UAAU,+BACV2C,QAASH,KAAKlB,WAHhB,cAOA,4BACErB,KAAK,SACLD,UAAU,+BACV2C,QAASH,KAAKjB,aAHhB,gBAOA,4BAAQtB,KAAK,SAASD,UAAU,mBAAhC,+B,GAjGE4C,aCMEC,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.205fde04.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\n  <div className=\"form-check\">\n    <label>\n      <input\n        type=\"checkbox\"\n        name={label}\n        checked={isSelected}\n        onChange={onCheckboxChange}\n        className=\"form-check-input\"\n      />\n      {label}\n    </label>\n  </div>\n);\n\nexport default Checkbox;","import React, { Component } from 'react';\nimport Checkbox from \"./Checkbox\";\nimport Dropdown from 'react-dropdown';\nimport './App.css';\nimport distanceData from './distances';\n\nclass App extends Component {\n  locations = Object.keys(distanceData).sort();\n\n  state = {\n    checkboxes: this.locations.reduce(\n      (options, option) => ({\n        ...options,\n        [option]: false\n      }),\n      {}\n    ),\n    start: this.locations[0]\n  };\n\n  selectAllCheckboxes = isSelected => {\n    Object.keys(this.state.checkboxes).forEach(checkbox => {\n      this.setState(prevState => ({\n        checkboxes: {\n          ...prevState.checkboxes,\n          [checkbox]: isSelected\n        }\n      }));\n    });\n  };\n\n  selectAll = () => this.selectAllCheckboxes(true);\n\n  deselectAll = () => this.selectAllCheckboxes(false);\n\n  handleCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [name]: !prevState.checkboxes[name]\n      },\n      start: prevState.start\n    }));\n  };\n\n  handleFormSubmit = formSubmitEvent => {\n    formSubmitEvent.preventDefault();\n\n    Object.keys(this.state.checkboxes)\n      .filter(checkbox => this.state.checkboxes[checkbox])\n      .forEach(checkbox => {\n        console.log(checkbox, \"is selected.\");\n      });\n    console.log(this.state.start, \"is the start\")\n  };\n\n  createCheckbox = option => (\n    <Checkbox\n      label={option}\n      isSelected={this.state.checkboxes[option]}\n      onCheckboxChange={this.handleCheckboxChange}\n      key={option}\n    />\n  );\n\n  createCheckboxes = () => this.locations.map(this.createCheckbox);\n\n  updateStart = location => {\n    this.setState(prevState => ({\n      checkboxes: prevState.checkboxes,\n      start: location.value\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Traveling Freighter</h1>\n        <div className=\"row mt-5\">\n          <div className=\"col-sm-12\">\n            <h2>Select your starting location</h2>\n            <Dropdown options={this.locations} value={this.locations[0]} onChange={this.updateStart} placeholder=\"Select a start location\" />\n            <h2>Select the locations of boxes you have to deliver</h2>\n            <form onSubmit={this.handleFormSubmit}>\n              {this.createCheckboxes()}\n\n              <div className=\"form-group mt-2\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-outline-primary mr-2\"\n                  onClick={this.selectAll}\n                >\n                  Select All\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-outline-primary mr-2\"\n                  onClick={this.deselectAll}\n                >\n                  Deselect All\n                </button>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Compute your path!\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}