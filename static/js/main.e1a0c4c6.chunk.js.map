{"version":3,"sources":["Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","label","isSelected","onCheckboxChange","className","type","name","checked","onChange","App","props","selectAllCheckboxes","Object","keys","state","checkboxes","forEach","checkbox","setState","prevState","start","solution","selectAll","deselectAll","handleCheckboxChange","changeEvent","target","handleFormSubmit","formSubmitEvent","preventDefault","filter","console","log","value","createCheckbox","option","key","createCheckboxes","locations","map","updateStart","location","solutionTable","table","i","length","push","distanceData","sort","reduce","options","this","placeholder","onSubmit","onClick","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1a0c4c6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Checkbox = ({ label, isSelected, onCheckboxChange }) => (\n  <div className=\"form-check\">\n    <label>\n      <input\n        type=\"checkbox\"\n        name={label}\n        checked={isSelected}\n        onChange={onCheckboxChange}\n        className=\"form-check-input\"\n      />\n      {label}\n    </label>\n  </div>\n);\n\nexport default Checkbox;","import React, { Component } from 'react';\nimport Checkbox from \"./Checkbox\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport './App.css';\nimport distanceData from './distances';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.locations = Object.keys(distanceData).sort();\n    this.state = {\n      checkboxes: this.locations.reduce(\n        (options, option) => ({\n          ...options,\n          [option]: false\n        }),\n        {}\n      ),\n      start: this.locations[0],\n      solution: []\n    };\n  }\n\n  selectAllCheckboxes = isSelected => {\n    Object.keys(this.state.checkboxes).forEach(checkbox => {\n      this.setState(prevState => ({\n        checkboxes: {\n          ...prevState.checkboxes,\n          [checkbox]: isSelected\n        },\n        start: prevState.start,\n        solution: prevState.solution\n      }));\n    });\n  };\n\n  selectAll = () => this.selectAllCheckboxes(true);\n  deselectAll = () => this.selectAllCheckboxes(false);\n\n  handleCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [name]: !prevState.checkboxes[name]\n      },\n      start: prevState.start,\n      solution: prevState.solution\n    }));\n  };\n\n  handleFormSubmit = formSubmitEvent => {\n    formSubmitEvent.preventDefault();\n\n    Object.keys(this.state.checkboxes)\n      .filter(checkbox => this.state.checkboxes[checkbox])\n      .forEach(checkbox => {\n        console.log(checkbox, \"is selected.\");\n      });\n    console.log(this.state.start, \"is the start\")\n\n    this.setState(prevState => ({\n      checkboxes: prevState.checkboxes,\n      start: prevState.value,\n      solution: prevState.checkboxes\n    }));\n  };\n\n  createCheckbox = option => (\n    <Checkbox\n      label={option}\n      isSelected={this.state.checkboxes[option]}\n      onCheckboxChange={this.handleCheckboxChange}\n      key={option}\n    />\n  );\n\n  createCheckboxes = () => this.locations.map(this.createCheckbox);\n\n  updateStart = location => {\n    this.setState(prevState => ({\n      checkboxes: prevState.checkboxes,\n      start: location.value,\n      solution: prevState.solution\n    }));\n  };\n\n  solutionTable = () => {\n    console.log(this.state.solution);\n    let table = [];\n    for (let i = 0; i < this.state.solution.length; i++) {\n      table.push(<tr><td>{this.state.solution[i]}</td></tr>);\n    }\n    return table;\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Traveling Freighter</h1>\n\n        <h2>Select your starting location</h2>\n        <Dropdown options={this.locations} value={this.locations[0]} onChange={this.updateStart} placeholder=\"Select a start location\" />\n\n        <h2>Select the locations of boxes you have to deliver</h2>\n        <form onSubmit={this.handleFormSubmit}>\n          {this.createCheckboxes()}\n\n          <div className=\"form-group mt-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-primary mr-2\"\n              onClick={this.selectAll}\n            >\n              Select All\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-primary mr-2\"\n              onClick={this.deselectAll}\n            >\n              Deselect All\n            </button>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Compute your path!\n            </button>\n          </div>\n        </form>\n\n        <h2>Your Pathc</h2>\n        <table>\n          {this.solutionTable()}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}